// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../@graspologic/common
//   ../@graspologic/renderables-edges
//   ../@graspologic/renderables-base
//   ../@graspologic/graph

declare module '@graspologic/renderables-support' {
    export * from '@graspologic/renderables-support/AxesRenderable';
    export * from '@graspologic/renderables-support/LabelRenderable';
    export * from '@graspologic/renderables-support/ScreenQuadRenderable';
    export * from '@graspologic/renderables-support/VertexLabelRenderable';
    export * from '@graspologic/renderables-support/VertexSetLabelRenderable';
    export * from '@graspologic/renderables-support/VertexSetRenderable';
}

declare module '@graspologic/renderables-support/AxesRenderable' {
    import { RenderOptions, RenderConfiguration } from '@graspologic/common';
    import { EdgesRenderable } from '@graspologic/renderables-edges';
    /**
        * A renderable that can be added to a GraphRenderer to render a set of Axes on the graph
        */
    export class AxesRenderable extends EdgesRenderable {
            /**
                * Constructor
                * @param gl The gl context to render the axes to
                * @param config The render configuration
                */
            constructor(gl: WebGLRenderingContext, config: RenderConfiguration);
            /**
                * Resizes the axes renderable
                * @param width The render width
                * @param height The render height
                */
            resize(width: number, height: number): void;
            /**
                * Gets the maxiumum width of an edge
                */
            protected get edgeMaxWidth(): number;
            /**
                * Gets whether or not the edges are antialiased
                */
            protected get edgeAntialias(): boolean;
            /**
                * Gets the alpha used to render the edges
                */
            protected get edgeAlpha(): number;
            /**
                * Gets whether or not the edges should be rendered with a constant width
                */
            protected get edgeConstantWidth(): boolean;
            /**
                * Renders the axes renderable
                * @param options The set of render options
                */
            draw(options: RenderOptions): void;
    }
}

declare module '@graspologic/renderables-support/LabelRenderable' {
    import { RenderOptions } from '@graspologic/common';
    import { DirtyableRenderable } from '@graspologic/renderables-base';
    /**
        * A renderable that can be added to a GraphRenderer for rendering labels
        */
    export class LabelRenderable extends DirtyableRenderable {
            /**
                * Constructor
                * @param gl The gl context to render to
                * @param id The id for the renderable
                */
            constructor(gl: WebGLRenderingContext, id?: any);
            /**
                * Gets the label to display
                */
            get text(): string;
            /**
                * Sets the label to display
                */
            set text(value: string);
            /**
                * Sets the font
                */
            get font(): string;
            /**
                * Gets the font
                */
            set font(value: string);
            /**
                * Gets the font size
                */
            get fontSize(): number;
            /**
                * Sets the font size
                */
            set fontSize(value: number);
            /**
                * Gets the horizontal padding
                */
            get horizontalPadding(): number;
            /**
                * Sets the horizontal padding
                */
            set horizontalPadding(value: number);
            /**
                * Gets the vertical padding
                */
            get verticalPadding(): number;
            /**
                * Sets the vertical padding
                */
            set verticalPadding(value: number);
            /**
                * Gets the outline width
                */
            get outlineWidth(): number;
            /**
                * Sets the outline width
                */
            set outlineWidth(value: number);
            /**
                * Gets the outline color
                */
            get outlineColor(): string;
            /**
                * Sets the outline color
                */
            set outlineColor(value: string);
            /**
                * Gets the background color
                */
            get backgroundColor(): string;
            /**
                * Sets the background color
                */
            set backgroundColor(value: string);
            /**
                * Gets the text color
                */
            get textColor(): string;
            /**
                * Sets the text color
                */
            set textColor(value: string);
            /**
                * Gets the weight
                */
            get weight(): number;
            /**
                * Sets the weight
                */
            set weight(value: number);
            /**
                * Draws the LabelRenderable
                * @param options The render options
                */
            draw(options: RenderOptions): void;
            /**
                * Sets the position of the label
                * @param position01 The position of the label
                */
            setPositions(position01: number[]): void;
    }
}

declare module '@graspologic/renderables-support/ScreenQuadRenderable' {
    import { Renderable, RenderOptions } from '@graspologic/common';
    import { DirtyableRenderable } from '@graspologic/renderables-base';
    /**
        * @internal
        *
        * Renderable that renders other Renderables to a buffer which gets rendered to the screen
        */
    export class ScreenQuadRenderable extends DirtyableRenderable {
            /**
                * Constructor
                * @param gl The gl context to render the screen quad to
                * @param id The id of the renderable
                */
            constructor(gl: WebGLRenderingContext, id?: string);
            /**
                * Updates the screen quad by re-rendering its child renderables
                * @param forceRedraw True if the screen quad should be forced to be redrawn
                * @param options The render options
                */
            update(forceRedraw: boolean, options: RenderOptions): void;
            /**
                * Gets whether or not the screen quad needs to be redrawn
                */
            get needsRedraw(): any;
            /**
                * Resizes the screen quad
                * @param width The render width
                * @param height The render height
                */
            resize(width: number, height: number): void;
            /**
                * Draws the screen quad
                */
            draw(): void;
            /**
                * Adds a renderable that should be rendered to this screen quad
                * @param renderable The renderable to add
                */
            addRenderable(renderable: Renderable): void;
            /**
                * Removes a renderable from the screen quad
                * @param renderable The renderable to add
                */
            removeRenderable(renderable: Renderable): void;
            /**
                * Gets the list of renderables contained in this renderable
                */
            renderables(): Iterable<Renderable>;
            /**
                * Destroys the screen quad
                */
            destroy(): void;
    }
}

declare module '@graspologic/renderables-support/VertexLabelRenderable' {
    import { RenderOptions } from '@graspologic/common';
    import { Node } from '@graspologic/graph';
    import { DataboundRenderable } from '@graspologic/renderables-base';
    /**
        * A renderable that can be added to a GraphRenderer for rendering labels for a single node
        */
    export class VertexLabelRenderable extends DataboundRenderable<Node> {
            /**
                * Constructor
                * @param gl The gl context
                */
            constructor(gl: WebGLRenderingContext);
            /**
                * Sets the vertex to render the label for
                * @param vertex The vertex to render the label for
                */
            handleSetData(vertex: Node | undefined): void;
            draw(options: RenderOptions): void;
    }
}

declare module '@graspologic/renderables-support/VertexSetLabelRenderable' {
    import { Node } from '@graspologic/graph';
    import { CompositeDataboundRenderable } from '@graspologic/renderables-base';
    /**
        * A renderable that can be added to a GraphRenderer for rendering labels for a set of nodes
        */
    export class VertexSetLabelRenderable extends CompositeDataboundRenderable<Node[]> {
            /**
                * Constructor
                * @param gl The gl context
                */
            constructor(gl: WebGLRenderingContext);
            /**
                * Sets the verticies to label
                * @param data The set of verticies to label
                */
            protected handleSetData(data: Node[] | undefined): void;
    }
}

declare module '@graspologic/renderables-support/VertexSetRenderable' {
    import { RenderOptions } from '@graspologic/common';
    import { Node } from '@graspologic/graph';
    import { DataboundRenderable } from '@graspologic/renderables-base';
    export const position: unique symbol;
    export const radius: unique symbol;
    export const weight: unique symbol;
    export const visible: unique symbol;
    export const shape: unique symbol;
    export const LAYOUT: any;
    export const LAYOUT_STRIDE: any;
    export const POSITION_OFFSET: any;
    export const WEIGHT_OFFSET: any;
    export const RADIUS_OFFSET: any;
    export const SHAPE_OFFSET: any;
    /**
        * A vertex renderable for a multiple vertices, for use in rendering like highlights
        */
    export class VertexSetRenderable extends DataboundRenderable<Node[]> {
            /**
                * Constructor
                * @param gl The gl context
                * @param id The id of the renderable
                */
            constructor(gl: WebGLRenderingContext, id?: any);
            /**
                * Gets the color for the renderable
                */
            get color(): number[];
            /**
                * Sets the color for the renderable
                */
            set color(value: number[]);
            /**
                * Draws the VertexSetHighlightRenderable
                * @param options The render options
                */
            draw(options: RenderOptions): void;
            /**
                * Sets the vertex to be rendered
                * @param vertices The vertex to render
                */
            protected handleSetData(vertices: Node[]): void;
    }
}

