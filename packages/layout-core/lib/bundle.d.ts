// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../@graspologic/common
//   ../@graspologic/graph

declare module '@graspologic/layout-core' {
    export * from '@graspologic/layout-core/workers';
    export * from '@graspologic/layout-core/layout';
    export * from '@graspologic/layout-core/clock';
}

declare module '@graspologic/layout-core/workers' {
    export * from '@graspologic/layout-core/workers/LayoutWorkerManager';
    export * from '@graspologic/layout-core/workers/workerFactory';
    export * from '@graspologic/layout-core/workers/types';
}

declare module '@graspologic/layout-core/layout' {
    export * from '@graspologic/layout-core/layout/BaseExecutor';
}

declare module '@graspologic/layout-core/clock' {
    export * from '@graspologic/layout-core/clock/CountdownClock';
    export * from '@graspologic/layout-core/clock/types';
}

declare module '@graspologic/layout-core/workers/LayoutWorkerManager' {
    import { EventEmitter } from '@graspologic/common';
    import { GraphContainer } from '@graspologic/graph';
    export interface LayoutWorkerManagerEvents<TickProgress> {
            /**
                * An even for when the layout progresses
                */
            progress: (progress: TickProgress) => void;
    }
    /**
        * A manager class for using webworker-based layout execution
        */
    export class LayoutWorkerManager<Configuration, TickProgress> extends EventEmitter<LayoutWorkerManagerEvents<TickProgress>> {
            /**
                * Constructor for the LayoutWorkerManager
                * @param createWorker A callback for instantiating the worker
                */
            constructor(createWorker: () => Worker);
            /**
                * Configures the layout worker
                * @param configuration The configuration options for the layout worker
                */
            configure(configuration: Partial<Configuration>): void;
            /**
                * Performs the layout on the given graph
                * @param graph The graph to perform the layout on
                * @returns A promise for when the layout is completed
                */
            layout(graph: GraphContainer): Promise<TickProgress>;
            /**
                * Resets the layout worker to it's initial state
                */
            reset(): void;
            /**
                * Stops the current layout process
                */
            halt(): void;
            /**
                * Resumes the current layout process
                */
            resume(): void;
    }
}

declare module '@graspologic/layout-core/workers/workerFactory' {
    export function workerFactoryFromScript(workerScript: string): () => Worker;
}

declare module '@graspologic/layout-core/workers/types' {
    import { TransportGraph } from '@graspologic/graph';
    /**
        * @internal
        *
        * The type of message for Manager <-> Worker communication
        */
    export enum WorkerMessageType {
            /**
                * Tells the worker to configure itself
                */
            Configure = "CONFIGURE",
            /**
                * Tells the worker to execute the layout
                */
            Execute = "EXECUTE",
            /**
                * Tells the worker to halt layout
                */
            Halt = "HALT",
            /**
                * Tells the worker to resume layout
                */
            Resume = "RESUME",
            /**
                * Tells the worker to reset it's to the initial state
                */
            Reset = "RESET",
            /**
                * Tells the manager that the worker experienced an error
                */
            Error = "ERROR",
            /**
                * Tells the manager that progress has occurred on the graph layout
                */
            Progress = "PROGRESS",
            /**
                * Tells the manager that the worker has completed layout of the graph
                */
            Complete = "COMPLETE"
    }
    /**
        * @internal
        *
        * The shape of the messages send to the worker
        */
    export interface WorkerMessage<T> {
            /**
                * The type of message
                */
            type: WorkerMessageType;
            /**
                * The payload of the message
                */
            payload?: T;
    }
    /**
        * @internal
        *
        * The shape of the "Execute" message type payload
        */
    export interface ExecuteMessagePayload<Configuration> {
            /**
                * The graph to execute layout on
                */
            graph: TransportGraph;
            /**
                * The configuration for the layout
                */
            configuration?: Partial<Configuration>;
    }
}

declare module '@graspologic/layout-core/layout/BaseExecutor' {
    import { TickingClock } from '@graspologic/layout-core/clock';
    import { EventEmitter } from '@graspologic/common';
    import { GraphContainer } from '@graspologic/graph';
    export interface BaseExecutorEvents<Progress> {
            /**
                * A layout tick has occurred occurred
                */
            tick: (progress: Progress) => void;
    }
    /**
        * @internal
        *
        * Base class for layout executors
        */
    export abstract class BaseExecutor<Config, Clock extends TickingClock, Progress> extends EventEmitter<BaseExecutorEvents<Progress>> {
            /**
                * Constructor for the base executor
                * @param graph The graph to run the layout on
                * @param config The configuration for the layout
                * @param clock The clock which is used to indicate when a layout cycle has occurred
                * @param globalObject The "global" object environment
                */
            constructor(graph: GraphContainer, config: Config, clock: Clock, globalObject: any);
            /**
                * Halts the layout process
                */
            halt(): void;
            /**
                * Returns true if the layout is halted
                */
            get isHalted(): boolean;
            /**
                * Returns true if the layout is completed
                */
            get isComplete(): boolean;
            /**
                * Gets the current clock
                */
            get clock(): Clock;
            /**
                * Gets the current graph
                */
            get graph(): GraphContainer;
            /**
                * Gets the current global object
                */
            get globalObject(): any;
            /**
                * Gets the current configuration
                */
            get configuration(): Config;
            /**
                * Configures the executor
                * @param config The layout config
                */
            configure(config: Partial<Config>): void;
            /**
                * The default configuration for the executor
                */
            protected abstract defaultConfiguration: Config;
            /**
                * Executes the layout process
                */
            execute(): Promise<Progress>;
            /**
                * Gets the name of the layout algorithm
                * @returns The name
                */
            protected abstract getName(): string;
            /**
                * Gets the the current progress of the layout algorithm
                * @returns The current progress
                */
            protected abstract getProgress(): Progress;
            /**
                * Performs a unit of work on the layout
                */
            protected abstract performUnitOfWork(): void;
    }
}

declare module '@graspologic/layout-core/clock/CountdownClock' {
    import { TickingClock } from '@graspologic/layout-core/clock/types';
    /**
        * @internal
        *
        * An implementation of a clock which will tick until it reaches a target tick count
        */
    export class CountdownClock implements TickingClock {
            /**
                * Constructor for the countdown clock
                * @param targetTicks The target number of ticks to run
                */
            constructor(targetTicks: number);
            /**
                * Gets the current ticks
                */
            get currentTicks(): number;
            /**
                * Gets the target ticks
                */
            get targetTicks(): number;
            /**
                * Ticks the current clock
                */
            tick(): boolean;
    }
}

declare module '@graspologic/layout-core/clock/types' {
    export type OnTickHandler<T> = (arg: T) => void;
    /**
        * @internal
        *
        * Shape of a clock that can be ticked
        */
    export interface TickingClock {
            /**
                * Ticks the clock
                * @returns True if the clock was ticked
                */
            tick(): boolean;
    }
}

