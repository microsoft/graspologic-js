// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../@graspologic/memstore

declare module '@graspologic/animation' {
    export * from '@graspologic/animation/AnimationUtil';
    export * from '@graspologic/animation/utils';
    export * from '@graspologic/animation/types';
}

declare module '@graspologic/animation/AnimationUtil' {
    import { AnimationUtil } from '@graspologic/animation/types';
    /**
        * Creates a set of animation utilities
        * @param engineTime The engine time
        */
    export function createAnimationUtil(engineTime?: () => number): AnimationUtil;
}

declare module '@graspologic/animation/utils' {
    export * from '@graspologic/animation/utils/restartTween';
    export * from '@graspologic/animation/utils/readTween';
    export * from '@graspologic/animation/utils/writeTween';
}

declare module '@graspologic/animation/types' {
    import { MemoryReader, AttributeName } from '@graspologic/memstore';
    /**
        * A utility for animating various properties of items
        */
    export interface AnimationUtil {
            /**
                * Animates a point
                * @param item The item to animate the point for
                * @param attribute The point attribute to animate
                * @param point The point to animate to
                * @param duration __default = 0__ The duration of time to transition from the old point to this new point.  If the value is 0, no transition will occur
                */
            animatePoint(item: MemoryReader, attribute: AttributeName, point: [number, number, number] | [number, number], duration?: number): void;
            /**
                * Animates a color
                * @param item The item to animate the color for
                * @param attribute The color attribute to animate
                * @param point The color to animate to
                * @param duration __default = 0__ The duration of time to transition from the old color to this new color.  If the value is 0, no transition will occur
                */
            animateColor(item: MemoryReader, attribute: AttributeName, color: number, duration?: number): void;
    }
}

declare module '@graspologic/animation/utils/restartTween' {
    import { AttributeName, ArrayStore } from '@graspologic/memstore';
    /**
        * @internal
        *
        * Restart a tween
        * @param store The attay store
        * @param storeId The item storeid
        * @param tweenAttribute The tween attribute to read
        * @param startTime The start time of the tween
        * @returns The start time of the tween
        */
    export function restartTween(store: ArrayStore, storeId: number, tweenAttribute: AttributeName, startTime: number): number;
}

declare module '@graspologic/animation/utils/readTween' {
    import { AttributeName, ArrayStore } from '@graspologic/memstore';
    /**
        * @internal
        *
        * Read a tween
        * @param store The attay store
        * @param storeId The item storeid
        * @param tweenAttribute The tween attribute to read
        * @returns The duration and start time of the tween
        */
    export function readTween(store: ArrayStore, storeId: number, tweenAttribute: AttributeName): [number, number];
    /**
        * @internal
        *
        * Reads the computed end time of the given tween
        * @param store The attay store
        * @param storeId The item storeid
        * @param tweenAttribute The tween attribute to read
        * @returns The computed end time of the tween
        */
    export function readTweenEndTime(store: ArrayStore, storeId: number, tweenAttribute: AttributeName): any;
}

declare module '@graspologic/animation/utils/writeTween' {
    import { AttributeName, ArrayStore } from '@graspologic/memstore';
    /**
        * @internal
        *
        * Writes a tween
        * @param store The attay store
        * @param storeId The item storeid
        * @param tweenAttribute The tween attribute to read
        * @param duration The duration of the tween
        * @param startTime The start time of the tween
        * @returns The start time of the tween
        */
    export function writeTween(store: ArrayStore, storeId: number, tweenAttribute: AttributeName, duration: number, startTime: number): void;
}

