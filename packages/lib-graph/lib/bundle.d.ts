// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../@graspologic/common
//   ../@graspologic/memstore

declare module '@graspologic/graph' {
    export * from '@graspologic/graph/space';
    export * from '@graspologic/graph/graph';
    export * from '@graspologic/graph/helpers';
    export * from '@graspologic/graph/primitives';
}

declare module '@graspologic/graph/space' {
    export * from '@graspologic/graph/space/measure';
    export * from '@graspologic/graph/space/types';
    export * from '@graspologic/graph/space/QuadTree';
}

declare module '@graspologic/graph/graph' {
    export * from '@graspologic/graph/graph/GraphContainer';
    export * from '@graspologic/graph/graph/types';
}

declare module '@graspologic/graph/helpers' {
    export * from '@graspologic/graph/helpers/rand';
    export * from '@graspologic/graph/helpers/computeBounds';
}

declare module '@graspologic/graph/primitives' {
    export * from '@graspologic/graph/primitives/node';
    export * from '@graspologic/graph/primitives/edge';
    export * from '@graspologic/graph/primitives/types';
}

declare module '@graspologic/graph/space/measure' {
    import { Position } from '@graspologic/graph/space/types';
    /**
        * @internal
        *
        * Computes the square distance between the two points
        * @param pos1 The first position
        * @param pos2 The second position
        * @returns The square distance
        */
    export function squareDistanceTo(pos1: Position, pos2: Position): number;
    /**
        * @internal
        *
        * Computes the euclidean distance between the two points
        * @param pos1 The first position
        * @param pos2 The second position
        * @returns The distance
        */
    export function distanceTo(pos1: Position, pos2: Position): number;
    /**
        * @internal
        * Computes the the weighted center of the given positions, using the given weights
        * @param points The list of points
        * @param weights The list of weights
        * @returns The weighted centroid
        */
    export function weightedCentroid(points: Position[], weights: number[]): Position;
}

declare module '@graspologic/graph/space/types' {
    export interface Position {
        x: number;
        y: number;
    }
}

declare module '@graspologic/graph/space/QuadTree' {
    import { Node } from '@graspologic/graph/primitives';
    /**
        * @internal
        *
        * An implementation of a quad tree
        */
    export class QuadTree {
            node: Node | undefined;
            nwChild: QuadTree | undefined;
            neChild: QuadTree | undefined;
            swChild: QuadTree | undefined;
            seChild: QuadTree | undefined;
            mass: number;
            /**
                * Center of mass X
                */
            cx: number;
            /**
                * Center of mass Y
                */
            cy: number;
            x0: number;
            x1: number;
            y0: number;
            y1: number;
            readonly level: number;
            /**
                * Constructor for QuadTree
                * @param nodes The nodes in the tree
                * @param level The level of this quad tree
                */
            constructor(nodes: Node[], level?: number);
            /**
                * Gets the depth of this quad tree
                * @returns The depth
                */
            get depth(): number;
            /**
                * Gets the size of the quad tree
                */
            get size(): number;
            /**
                * True if the quad tree is a leaf
                */
            get isLeaf(): boolean;
            /**
                * Applies a visitor to the quad tree
                * @param callback The visitor
                */
            visit(callback: (qt: QuadTree) => boolean): void;
    }
}

declare module '@graspologic/graph/graph/GraphContainer' {
    import { EdgeStore } from '@graspologic/graph/primitives/edge';
    import { NodeStore } from '@graspologic/graph/primitives/node';
    import { Position } from '@graspologic/graph/space/types';
    import { InternGraphOptions } from '@graspologic/graph/graph/internGraph';
    import { NodeIndex, TransportGraph, InputGraph } from '@graspologic/graph/graph/types';
    /**
        * The datastructure which contains all the internal graph data required for the GraphRenderer
        */
    export class GraphContainer {
            /**
                * @internal
                * Constructs a new instance of the GraphContainer
                * @param nodes The initial node data store
                * @param edges The initial edge data store
                */
            constructor(nodes: NodeStore, edges: EdgeStore);
            /**
                * @internal
                * Gets the underlying node store
                */
            get nodes(): NodeStore;
            /**
                * @internal
                * Gets the underlying edge store
                */
            get edges(): EdgeStore;
            /**
                * Creates an instance of the GraphContainer using the given input graph
                * @param inputGraph The pojo graph to intern
                * @param options The set of options controlling how the graph is interned, defaults to @see {@link DEFAULT_INTERN_GRAPH_OPTIONS}
                * @returns The GraphContainer
                */
            static intern(inputGraph: InputGraph, options?: InternGraphOptions): GraphContainer;
            /**
                * @internal
                * Serializes the GraphContainer instance
                * @returns The serialized version of the GraphContainer
                */
            serialize(): TransportGraph;
            /**
                * @internal
                * Deserializes the GraphContainer instance
                * @param graph The serialized version of the GraphContainer
                * @returns The deserialized GraphContainer
                */
            static deserialize(graph: TransportGraph): GraphContainer;
            /**
                * @internal
                * Retrieve neigbors of the given node. This may be reflect edge-cutting
                * performed by the algorithm
                * @param n The node index to retrieve neighbors for
                * @returns A list of neighbor node indices
                */
            getNeighbors(n: NodeIndex): NodeIndex[];
            /**
                * @internal
                * Retrieve neigbors of the given node. This will not reflect any edge-cutting
                * performed by the algorithm
                * @param n The node index to retrieve neighbors for
                * @returns A list of neighbor node indices
                */
            getNeighborsObjective(id: NodeIndex): NodeIndex[];
            /**
                * @internal
                * Gets the edge weight between two nodes, which may reflect edge-cutting.
                * @throws if source and target are not connected
                * @param source The source node index
                * @param target The target node index
                * @returns The edge weight
                */
            getEdgeWeight(source: NodeIndex, target: NodeIndex): number;
            /**
                * @internal
                * Gets the edge weight between two nodes, ignoring reflect edge-cutting
                * @throws if source and target are not connected
                * @param source The source node index
                * @param target The target node index
                * @returns The edge weight
                */
            getEdgeWeightObjective(source: NodeIndex, target: NodeIndex): number;
            /**
                * @internal
                * Returns the computed cetroid of the neighborhood that the given node is a part of
                * @param n The node to get the neighborhood centroid for
                * @returns The centroid
                */
            getNeighborhoodCentroid(n: NodeIndex): Position;
            /**
                * @internal
                * Prunes an edge
                * @param from The source node
                * @param to The target node
                */
            pruneEdge(from: NodeIndex, to: NodeIndex): void;
    }
}

declare module '@graspologic/graph/graph/types' {
    import { Shape } from '@graspologic/graph/primitives';
    export type NodeId = string;
    export type NodeIndex = number;
    export type EdgeWeight = number;
    /**
        * A graph representation to use for worker-wire transport.
        * Workers should use SharedArrayBuffer to minimize serialization/deserialization
        */
    export interface TransportGraph {
            nodes: ArrayBuffer;
            edges: ArrayBuffer;
    }
    /**
        * An unprocessed graph
        */
    export interface InputGraph {
            nodes: InputNode[];
            edges: InputEdge[];
    }
    /**
        * An unprocessed node
        */
    export interface InputNode {
            id: string;
            size?: number;
            radius?: number;
            weight?: number;
            label?: string;
            group?: string;
            shape?: Shape | 'square' | 'diamond' | 'circle';
            color?: number;
            x?: number;
            y?: number;
            z?: number;
    }
    /**
        * An unprocessed edge
        */
    export interface InputEdge {
            source: string;
            target: string;
            weight?: number;
            color?: number;
            sourceColor?: number;
            color2?: number;
            targetColor?: number;
    }
    /**
        * A mapping between every node to the nodes it's connected to
        */
    export type AdjacencyMap = Map<NodeIndex, Record<NodeIndex, EdgeWeight>>;
}

declare module '@graspologic/graph/helpers/rand' {
    export function jiggle(factor?: number): number;
    /**
        * @internal
        *
        * Generates a random number between the min and max values
        * @param min The minimum value of the number
        * @param max The maximum value of the number
        * @returns The random number
        */
    export function randBetween(min: number, max: number): number;
}

declare module '@graspologic/graph/helpers/computeBounds' {
    import { GraphContainer } from '@graspologic/graph/graph';
    import { Bounds3D, Maybe } from '@graspologic/common';
    /**
        * Computes the bounds of the given graph
        * @param graph The graph to compute the bounds from
        */
    export function computeBounds(graph: GraphContainer): Maybe<Bounds3D>;
}

declare module '@graspologic/graph/primitives/node' {
    export * from '@graspologic/graph/primitives/node/store';
    export * from '@graspologic/graph/primitives/node/types';
    export * from '@graspologic/graph/primitives/node/impl';
    export * from '@graspologic/graph/primitives/node/layout';
}

declare module '@graspologic/graph/primitives/edge' {
    export * from '@graspologic/graph/primitives/edge/store';
    export * from '@graspologic/graph/primitives/edge/types';
    export * from '@graspologic/graph/primitives/edge/impl';
    export * from '@graspologic/graph/primitives/edge/layout';
}

declare module '@graspologic/graph/primitives/types' {
    export type Pos3D = [number, number, number];
    /**
        * A 2D point array
        */
    export type Pos2D = [number, number];
    /**
        * The shape of an object
        */
    export enum Shape {
            Circle = 0,
            Square = 1,
            Diamond = 2
    }
    /**
        * A generic interface which represents a ClassType
        */
    export interface ClassType<T> {
            new (...args: any[]): T;
    }
}

declare module '@graspologic/graph/graph/internGraph' {
    import { GraphContainer } from '@graspologic/graph/graph/GraphContainer';
    import { InputGraph } from '@graspologic/graph/graph/types';
    /**
        * The set of graph options to intern a pojo graph into a GraphContainer
        */
    export interface InternGraphOptions {
            /**
                * A flag indicating to use SharedArrayBuffer memory,
                *
                * @defaultValue true
                */
            shareable?: boolean;
            /**
                * If present, randomizes non-existing node positions within the given range.
                * Arg=[minx, maxx, miny, maxy]
                */
            randomize?: [number, number, number, number];
            /**
                * The default value to use when edge weights are not present.
                *
                * @defaultValue 1
                */
            defaultEdgeWeight?: number;
    }
    export const DEFAULT_INTERN_GRAPH_OPTIONS: Readonly<{
            defaultEdgeWeight: number;
            shareable: boolean;
    }>;
    /**
        * @internal
        *
        * Interns a raw graph into a GraphContainer, used by graspologic
        * @param input A raw input graph
        * @param options: internization options
        * @returns The GraphContainer
        */
    export function internGraph(input: InputGraph, { shareable, randomize, defaultEdgeWeight, }?: Partial<InternGraphOptions>): GraphContainer;
}

declare module '@graspologic/graph/primitives/node/store' {
    import { NodeStoreConfig, NodeStore } from '@graspologic/graph/primitives/node/types';
    /**
      * @internal
      *
      * Returns a data buffer to keep track of Nodes
      * @param capacity The initial capacity of the data buffer
      * @param engineTime Function to return the current engine time
      * @returns A data store capable of storing Node objects
      */
    export function createNodeStore(config?: Partial<NodeStoreConfig>): NodeStore;
}

declare module '@graspologic/graph/primitives/node/types' {
    import { InputNode } from '@graspologic/graph/graph';
    import { Pos3D, Shape, Pos2D } from '@graspologic/graph/primitives/types';
    import { MemoryReader, ReaderStore, StoreConfig } from '@graspologic/memstore';
    /**
        * An interface representing a node
        */
    export interface Node extends MemoryReader {
            /**
                * The id of the node
                */
            id: string | undefined;
            /**
                * The group of a node
                */
            group: string | undefined;
            /**
                * The node label
                */
            label: string | undefined;
            /**
                * The weight of a node, from 0 - 1
                * @defaultValue 1
                */
            weight: number;
            /**
                * The radius of a node from 0 - 1. If __radius__ is > 0 it will be used to size the nodes, otherwise __weight__ will be used
                * @defaultValue 0
                */
            radius: number;
            /**
                * The size of the node
                * @alias radius
                * @defaultValue 0
                */
            size: number;
            /**
                * Returns the color in int32 hex format 0xAABBGGRR
                * For example, 0xFF00FF00 would be fully opaque green
                */
            color: number;
            /**
                * The center position of the node
                * @defaultValue [0, 0, 0]
                */
            position: Pos3D;
            /**
                * The x value of the node
                * @defaultValue 0
                */
            x: number;
            /**
                * The y value of the node
                * @defaultValue 0
                */
            y: number;
            /**
                * The z value of the node
                * @defaultValue 0
                */
            z: number;
            /**
                * The saturation of the node
                * @defaultValue 1
                */
            saturation: number;
            /**
                * The shape of the node
                * @defaultValue Shape.Circle
                */
            shape: Shape;
            /**
                * @internal
                * The node data
                */
            data: NodeStore | undefined;
            /**
                * @internal
                * Whether or not the node position is fixed, and shouldn't be moved
                */
            fixed: boolean;
            /**
                * @internal
                *
                * The id of the edge in the EdgeStore
                */
            storeId: number;
            /**
                * @internal
                * The visibility flag for the edge
                * @remarks
                * Used by the stores to mark an edge as removed
                */
            visible: boolean;
            /**
                * @internal
                * The unique picking color for the node, used for click/hover handling
                */
            pickingColor: [number, number, number];
            /**
                * @internal
                * The mass of the node
                */
            mass: number;
            /**
                * @internal
                * A property used with ForceAtlas2 that represents convergence
                */
            convergence: number;
            /**
                * @internal
                * A property used with ForceAtlas2 that represents forces being applied in the x direction
                */
            dx: number;
            /**
                * @internal
                * A property used with ForceAtlas2 that represents forces being applied in the y direction
                */
            dy: number;
            /**
                * @internal
                * A property used with ForceAtlas2 that represents previous forces applied in the x direction
                */
            old_dx: number;
            /**
                * @internal
                * A property used with ForceAtlas2 that represents previous forces applied in the y direction
                */
            old_dy: number;
            /**
                * Lodas the node from the given raw input data
                * @param data The raw data for the node
                */
            load(data: InputNode): void;
    }
    /**
        * The type representing a NodeStore
        */
    export interface NodeStore extends ReaderStore<Node> {
            /**
                * The current engine time
                */
            engineTime?: number;
    }
    /**
        * The NodeStore configuration options
        */
    export type NodeStoreConfig = StoreConfig;
    /**
        * An interface describing a Node that can be animated
        */
    export interface AnimatableNode extends Node {
            /**
                * Animates the node to the given position over the duration
                * @param position The position to animate to
                * @param duration The duration to animate over
                */
            animatePosition(position: Pos3D | Pos2D, duration?: number): void;
            /**
                * Animates the node to the given color over the duration
                * @param color The color to animate to
                * @param duration The duration to animate over
                */
            animateColor(color: number, duration?: number): void;
    }
}

declare module '@graspologic/graph/primitives/node/impl' {
    export * from '@graspologic/graph/primitives/node/impl/NodeImpl';
    export * from '@graspologic/graph/primitives/node/impl/AnimatableNodeImpl';
}

declare module '@graspologic/graph/primitives/node/layout' {
    import { PropertySpecification } from '@graspologic/memstore';
    /**
        * The unique symbol for a node
        */
    export const nodeType: unique symbol;
    /**
        * @internal
        *
        * The set of additional node properties
        */
    export const ADDITIONAL_NODE_PROPS: PropertySpecification[];
    /**
        * @internal
        *
        * The internal memory layout of a Node
        */
    export const nodeMemoryLayout: any;
    /**
        * Gets the typed offset for the given attribute
        */
    export function nodeTypedOffset(attribute: string): number | undefined;
}

declare module '@graspologic/graph/primitives/edge/store' {
    import { EdgeStore, EdgeStoreConfig } from '@graspologic/graph/primitives/edge/types';
    /**
      * @internal
      *
      * Returns a data buffer to keep track of Edges
      * @param capacity The initial capacity of the data buffer
      * @param engineTime Function to return the current engine time
      * @returns A data store capable of storing Edge objects
      */
    export function createEdgeStore(config?: Partial<EdgeStoreConfig>): EdgeStore;
}

declare module '@graspologic/graph/primitives/edge/types' {
    import { InputEdge } from '@graspologic/graph/graph';
    import { Pos2D, Pos3D } from '@graspologic/graph/primitives/types';
    import { MemoryReader, ReaderStore, StoreConfig } from '@graspologic/memstore';
    /**
        * An interface representing an edge
        */
    export interface Edge extends MemoryReader {
            /**
                * The id of the edge
                */
            id: string | undefined;
            /**
                * The source node id
                */
            source: string | undefined;
            /**
                * The target node id
                */
            target: string | undefined;
            /**
                * The weight of the edge, from 0 - 1
                *
                * @defaultValue 1
                */
            weight: number;
            /**
                * The source color in int32 hex format 0xAABBGGRR
                * For example, 0xFF00FF00 would be fully opaque green
                * @defaultValue 0xFF000000
                */
            color: number;
            /**
                * The target color in int32 hex format 0xAABBGGRR
                * For example, 0xFF00FF00 would be fully opaque green
                * @defaultValue 0xFF000000
                */
            color2: number;
            /**
                * The source saturation, from 0 - 1
                * @defaultValue 1
                */
            saturation: number;
            /**
                * The target saturation, from 0 - 1
                * @defaultValue 1
                */
            saturation2: number;
            /**
                * The source node position
                * @defaultValue [0, 0, 0]
                */
            sourcePosition: Pos2D | Pos3D;
            /**
                * The target node position
                * @defaultValue [0, 0, 0]
                */
            targetPosition: Pos2D | Pos3D;
            /**
                * @internal
                *
                * The id of the edge in the EdgeStore
                */
            storeId: number;
            /**
                * @internal
                * The visibility flag for the edge
                * @remarks
                * Used by the stores to mark an edge as removed
                */
            visible: boolean;
            /**
                * @internal
                * The edge data
                */
            data: EdgeStore | undefined;
            /**
                * @internal
                * The original weight
                */
            trueWeight: number;
            /**
                * @internal
                * The source node index
                */
            sourceIndex: number;
            /**
                * @internal
                * The target node index
                */
            targetIndex: number;
            /**
                * Loads the edge from the given raw input data
                * @param data The raw data for the edge
                * @param nodeIndexMap The index mapping for node ids to indices
                * @param defaultEdgeWeight The default edge weight to use
                */
            load(data: InputEdge, nodeIndexMap: Map<string, number>, defaultEdgeWeight?: number): void;
    }
    /**
        * The type for the edge store
        */
    export interface EdgeStore extends ReaderStore<Edge> {
            /**
                * The current engine time
                */
            engineTime?: number;
    }
    export interface AnimatableEdge extends Edge {
            /**
                * Animates the source position to __position__ over __duration__
                * @param position The position to animate to
                * @param duration The duration to animate over
                */
            animateSourcePosition(position: Pos3D | Pos2D, duration?: number): void;
            /**
                * Animates the target position to __position__ over __duration__
                * @param position The position to animate to
                * @param duration The duration to animate over
                */
            animateTargetPosition(position: Pos3D | Pos2D, duration?: number): void;
    }
    /**
        * The EdgeStore configuration options
        */
    export type EdgeStoreConfig = StoreConfig;
}

declare module '@graspologic/graph/primitives/edge/impl' {
    export * from '@graspologic/graph/primitives/edge/impl/EdgeImpl';
    export * from '@graspologic/graph/primitives/edge/impl/AnimatableEdgeImpl';
}

declare module '@graspologic/graph/primitives/edge/layout' {
    /**
        * The unique symbol for an edge
        */
    export const edgeType: unique symbol;
    /**
        * @internal
        *
        * The additional edge props
        */
    export const ADDITIONAL_EDGE_PROPS: string[];
    /**
        * @internal
        * The internal memory layout for storing edges
        */
    export const edgeMemoryLayout: any;
    /**
        * Gets the typed offset for the given attribute
        */
    export function edgeTypedOffset(attribute: string): number | undefined;
}

declare module '@graspologic/graph/primitives/node/impl/NodeImpl' {
    import { InputNode } from '@graspologic/graph/graph';
    import { Shape } from '@graspologic/graph/primitives/types';
    import { Node } from '@graspologic/graph/primitives/node/types';
    /**
        * An implementation of a Node
        */
    const BaseNodeImpl: any;
    export class NodeImpl extends BaseNodeImpl implements Node {
            /**
                * @inheritDoc
                * @see {@link Node.load}
                */
            load(data: InputNode): void;
    }
    /**
        * Parses a Shape from an unparsed shape value
        * @param unparsedShape
        */
    export function parseShape(unparsedShape?: Shape | string): Shape;
    export {};
}

declare module '@graspologic/graph/primitives/node/impl/AnimatableNodeImpl' {
    import { ClassType } from '@graspologic/graph/primitives/types';
    import { AnimatableNode, Node } from '@graspologic/graph/primitives/node/types';
    import { MemoryReader } from '@graspologic/memstore';
    /**
      * An implementation of a Node that has animation capabilities
      */
    export const AnimatableNodeImpl: ClassType<MemoryReader & Node & AnimatableNode>;
}

declare module '@graspologic/graph/primitives/edge/impl/EdgeImpl' {
    import { InputEdge } from '@graspologic/graph/graph';
    import { ClassType } from '@graspologic/graph/primitives/types';
    import { Edge } from '@graspologic/graph/primitives/edge/types';
    import { MemoryReader } from '@graspologic/memstore';
    /**
        * An implementation of an Edge
        */
    const BaseEdgeImpl: ClassType<MemoryReader & Edge>;
    export class EdgeImpl extends BaseEdgeImpl {
            /**
                * @inheritDoc
                * @see {@link Edge.load}
                */
            load(data: InputEdge, nodeIndexMap: Map<string, number>, defaultEdgeWeight?: number): void;
    }
    export {};
}

declare module '@graspologic/graph/primitives/edge/impl/AnimatableEdgeImpl' {
    import { ClassType } from '@graspologic/graph/primitives/types';
    import { AnimatableEdge, Edge } from '@graspologic/graph/primitives/edge/types';
    import { MemoryReader } from '@graspologic/memstore';
    /**
      * An implementation of an Edge that has animation capabilities
      */
    export const AnimatableEdgeImpl: ClassType<MemoryReader & Edge & AnimatableEdge>;
}

