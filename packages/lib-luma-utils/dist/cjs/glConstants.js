"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GL_ZERO = exports.GL_UNSIGNED_SHORT = exports.GL_UNSIGNED_INT = exports.GL_UNSIGNED_BYTE = exports.GL_TRIANGLE_STRIP = exports.GL_TRIANGLE_FAN = exports.GL_TRIANGLES = exports.GL_TEXTURE_WRAP_T = exports.GL_TEXTURE_WRAP_S = exports.GL_TEXTURE_MIN_FILTER = exports.GL_TEXTURE_MAG_FILTER = exports.GL_TEXTURE_CUBE_MAP_POSITIVE_Z = exports.GL_TEXTURE_CUBE_MAP_POSITIVE_Y = exports.GL_TEXTURE_CUBE_MAP_POSITIVE_X = exports.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = exports.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = exports.GL_TEXTURE_CUBE_MAP_NEGATIVE_X = exports.GL_TEXTURE_CUBE_MAP = exports.GL_TEXTURE_BINDING_CUBE_MAP = exports.GL_TEXTURE_2D = exports.GL_TEXTURE = exports.GL_STENCIL_INDEX8 = exports.GL_STENCIL_ATTACHMENT = exports.GL_SRC_COLOR = exports.GL_SRC_ALPHA_SATURATE = exports.GL_SRC_ALPHA = exports.GL_SHORT = exports.GL_RGBA4 = exports.GL_RGBA = exports.GL_RGB5_A1 = exports.GL_RGB565 = exports.GL_RGB = exports.GL_REPEAT = exports.GL_RENDERBUFFER_WIDTH = exports.GL_RENDERBUFFER_STENCIL_SIZE = exports.GL_RENDERBUFFER_RED_SIZE = exports.GL_RENDERBUFFER_INTERNAL_FORMAT = exports.GL_RENDERBUFFER_HEIGHT = exports.GL_RENDERBUFFER_GREEN_SIZE = exports.GL_RENDERBUFFER_DEPTH_SIZE = exports.GL_RENDERBUFFER_BLUE_SIZE = exports.GL_RENDERBUFFER_BINDING = exports.GL_RENDERBUFFER_ALPHA_SIZE = exports.GL_RENDERBUFFER = exports.GL_POINTS = exports.GL_ONE_MINUS_SRC_COLOR = exports.GL_ONE_MINUS_SRC_ALPHA = exports.GL_ONE_MINUS_DST_COLOR = exports.GL_ONE_MINUS_DST_ALPHA = exports.GL_ONE_MINUS_CONSTANT_COLOR = exports.GL_ONE_MINUS_CONSTANT_ALPHA = exports.GL_ONE = exports.GL_NONE = exports.GL_NEAREST_MIPMAP_NEAREST = exports.GL_NEAREST_MIPMAP_LINEAR = exports.GL_NEAREST = exports.GL_MIRRORED_REPEAT = exports.GL_MAX_RENDERBUFFER_SIZE = exports.GL_MAX_CUBE_MAP_TEXTURE_SIZE = exports.GL_LUMINANCE_ALPHA = exports.GL_LUMINANCE = exports.GL_LINE_STRIP = exports.GL_LINE_LOOP = exports.GL_LINES = exports.GL_LINEAR_MIPMAP_NEAREST = exports.GL_LINEAR_MIPMAP_LINEAR = exports.GL_LINEAR = exports.GL_INVALID_FRAMEBUFFER_OPERATION = exports.GL_INT = exports.GL_FUNC_SUBTRACT = exports.GL_FUNC_REVERSE_SUBTRACT = exports.GL_FUNC_ADD = exports.GL_FRAMEBUFFER_UNSUPPORTED = exports.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = exports.GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = exports.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = exports.GL_FRAMEBUFFER_COMPLETE = exports.GL_FRAMEBUFFER_BINDING = exports.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = exports.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = exports.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = exports.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = exports.GL_FRAMEBUFFER = exports.GL_FLOAT = exports.GL_DST_COLOR = exports.GL_DST_ALPHA = exports.GL_DEPTH_TEST = exports.GL_DEPTH_STENCIL_ATTACHMENT = exports.GL_DEPTH_STENCIL = exports.GL_DEPTH_COMPONENT16 = exports.GL_DEPTH_COMPONENT = exports.GL_DEPTH_ATTACHMENT = exports.GL_CONSTANT_COLOR = exports.GL_CONSTANT_ALPHA = exports.GL_COLOR_ATTACHMENT0 = exports.GL_CLAMP_TO_EDGE = exports.GL_BYTE = exports.GL_ALPHA = exports.GL_ACTIVE_TEXTURE = void 0;

/*!
 * Copyright (c) Microsoft. All rights reserved.
 * Licensed under the MIT license. See LICENSE file in the project.
 */
// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants
const GL_DEPTH_TEST = 0x0b71; // #region primitives

exports.GL_DEPTH_TEST = GL_DEPTH_TEST;
const GL_POINTS = 0x0000;
exports.GL_POINTS = GL_POINTS;
const GL_LINES = 0x0001;
exports.GL_LINES = GL_LINES;
const GL_LINE_LOOP = 0x0002;
exports.GL_LINE_LOOP = GL_LINE_LOOP;
const GL_LINE_STRIP = 0x0003;
exports.GL_LINE_STRIP = GL_LINE_STRIP;
const GL_TRIANGLES = 0x0004;
exports.GL_TRIANGLES = GL_TRIANGLES;
const GL_TRIANGLE_STRIP = 0x0005;
exports.GL_TRIANGLE_STRIP = GL_TRIANGLE_STRIP;
const GL_TRIANGLE_FAN = 0x0006; // #region data

exports.GL_TRIANGLE_FAN = GL_TRIANGLE_FAN;
const GL_BYTE = 0x1400;
exports.GL_BYTE = GL_BYTE;
const GL_UNSIGNED_BYTE = 0x1401;
exports.GL_UNSIGNED_BYTE = GL_UNSIGNED_BYTE;
const GL_SHORT = 0x1402;
exports.GL_SHORT = GL_SHORT;
const GL_UNSIGNED_SHORT = 0x1403;
exports.GL_UNSIGNED_SHORT = GL_UNSIGNED_SHORT;
const GL_INT = 0x1404;
exports.GL_INT = GL_INT;
const GL_UNSIGNED_INT = 0x1405;
exports.GL_UNSIGNED_INT = GL_UNSIGNED_INT;
const GL_FLOAT = 0x1406; // #region textures

exports.GL_FLOAT = GL_FLOAT;
const GL_NEAREST = 0x2600;
exports.GL_NEAREST = GL_NEAREST;
const GL_LINEAR = 0x2601;
exports.GL_LINEAR = GL_LINEAR;
const GL_NEAREST_MIPMAP_NEAREST = 0x2700;
exports.GL_NEAREST_MIPMAP_NEAREST = GL_NEAREST_MIPMAP_NEAREST;
const GL_LINEAR_MIPMAP_NEAREST = 0x2701;
exports.GL_LINEAR_MIPMAP_NEAREST = GL_LINEAR_MIPMAP_NEAREST;
const GL_NEAREST_MIPMAP_LINEAR = 0x2702;
exports.GL_NEAREST_MIPMAP_LINEAR = GL_NEAREST_MIPMAP_LINEAR;
const GL_LINEAR_MIPMAP_LINEAR = 0x2703;
exports.GL_LINEAR_MIPMAP_LINEAR = GL_LINEAR_MIPMAP_LINEAR;
const GL_TEXTURE_MAG_FILTER = 0x2800;
exports.GL_TEXTURE_MAG_FILTER = GL_TEXTURE_MAG_FILTER;
const GL_TEXTURE_MIN_FILTER = 0x2801;
exports.GL_TEXTURE_MIN_FILTER = GL_TEXTURE_MIN_FILTER;
const GL_TEXTURE_WRAP_S = 0x2802;
exports.GL_TEXTURE_WRAP_S = GL_TEXTURE_WRAP_S;
const GL_TEXTURE_WRAP_T = 0x2803;
exports.GL_TEXTURE_WRAP_T = GL_TEXTURE_WRAP_T;
const GL_TEXTURE_2D = 0x0de1;
exports.GL_TEXTURE_2D = GL_TEXTURE_2D;
const GL_TEXTURE = 0x1702;
exports.GL_TEXTURE = GL_TEXTURE;
const GL_TEXTURE_CUBE_MAP = 0x8513;
exports.GL_TEXTURE_CUBE_MAP = GL_TEXTURE_CUBE_MAP;
const GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
exports.GL_TEXTURE_BINDING_CUBE_MAP = GL_TEXTURE_BINDING_CUBE_MAP;
const GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
exports.GL_TEXTURE_CUBE_MAP_POSITIVE_X = GL_TEXTURE_CUBE_MAP_POSITIVE_X;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
exports.GL_TEXTURE_CUBE_MAP_NEGATIVE_X = GL_TEXTURE_CUBE_MAP_NEGATIVE_X;
const GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
exports.GL_TEXTURE_CUBE_MAP_POSITIVE_Y = GL_TEXTURE_CUBE_MAP_POSITIVE_Y;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
exports.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y;
const GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
exports.GL_TEXTURE_CUBE_MAP_POSITIVE_Z = GL_TEXTURE_CUBE_MAP_POSITIVE_Z;
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a;
exports.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z;
const GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851c; // export const GL_TEXTURE0 = - 31	0x84C0 - 0x84DF	A texture unit

exports.GL_MAX_CUBE_MAP_TEXTURE_SIZE = GL_MAX_CUBE_MAP_TEXTURE_SIZE;
const GL_ACTIVE_TEXTURE = 0x84e0;
exports.GL_ACTIVE_TEXTURE = GL_ACTIVE_TEXTURE;
const GL_REPEAT = 0x2901;
exports.GL_REPEAT = GL_REPEAT;
const GL_CLAMP_TO_EDGE = 0x812f;
exports.GL_CLAMP_TO_EDGE = GL_CLAMP_TO_EDGE;
const GL_MIRRORED_REPEAT = 0x8370; // #region Pixel formats

exports.GL_MIRRORED_REPEAT = GL_MIRRORED_REPEAT;
const GL_DEPTH_COMPONENT = 0x1902;
exports.GL_DEPTH_COMPONENT = GL_DEPTH_COMPONENT;
const GL_ALPHA = 0x1906;
exports.GL_ALPHA = GL_ALPHA;
const GL_RGB = 0x1907;
exports.GL_RGB = GL_RGB;
const GL_RGBA = 0x1908;
exports.GL_RGBA = GL_RGBA;
const GL_LUMINANCE = 0x1909;
exports.GL_LUMINANCE = GL_LUMINANCE;
const GL_LUMINANCE_ALPHA = 0x190a; // #region blending modes

exports.GL_LUMINANCE_ALPHA = GL_LUMINANCE_ALPHA;
const GL_ZERO = 0;
exports.GL_ZERO = GL_ZERO;
const GL_ONE = 1;
exports.GL_ONE = GL_ONE;
const GL_SRC_COLOR = 0x0300;
exports.GL_SRC_COLOR = GL_SRC_COLOR;
const GL_ONE_MINUS_SRC_COLOR = 0x0301;
exports.GL_ONE_MINUS_SRC_COLOR = GL_ONE_MINUS_SRC_COLOR;
const GL_SRC_ALPHA = 0x0302;
exports.GL_SRC_ALPHA = GL_SRC_ALPHA;
const GL_ONE_MINUS_SRC_ALPHA = 0x0303;
exports.GL_ONE_MINUS_SRC_ALPHA = GL_ONE_MINUS_SRC_ALPHA;
const GL_DST_ALPHA = 0x0304;
exports.GL_DST_ALPHA = GL_DST_ALPHA;
const GL_ONE_MINUS_DST_ALPHA = 0x0305;
exports.GL_ONE_MINUS_DST_ALPHA = GL_ONE_MINUS_DST_ALPHA;
const GL_DST_COLOR = 0x0306;
exports.GL_DST_COLOR = GL_DST_COLOR;
const GL_ONE_MINUS_DST_COLOR = 0x0307;
exports.GL_ONE_MINUS_DST_COLOR = GL_ONE_MINUS_DST_COLOR;
const GL_SRC_ALPHA_SATURATE = 0x0308;
exports.GL_SRC_ALPHA_SATURATE = GL_SRC_ALPHA_SATURATE;
const GL_CONSTANT_COLOR = 0x8001;
exports.GL_CONSTANT_COLOR = GL_CONSTANT_COLOR;
const GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
exports.GL_ONE_MINUS_CONSTANT_COLOR = GL_ONE_MINUS_CONSTANT_COLOR;
const GL_CONSTANT_ALPHA = 0x8003;
exports.GL_CONSTANT_ALPHA = GL_CONSTANT_ALPHA;
const GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004; // #region blending functions

exports.GL_ONE_MINUS_CONSTANT_ALPHA = GL_ONE_MINUS_CONSTANT_ALPHA;
const GL_FUNC_ADD = 0x8006;
exports.GL_FUNC_ADD = GL_FUNC_ADD;
const GL_FUNC_SUBTRACT = 0x800a;
exports.GL_FUNC_SUBTRACT = GL_FUNC_SUBTRACT;
const GL_FUNC_REVERSE_SUBTRACT = 0x800b; // #region Framebuffer

exports.GL_FUNC_REVERSE_SUBTRACT = GL_FUNC_REVERSE_SUBTRACT;
const GL_FRAMEBUFFER = 0x8d40;
exports.GL_FRAMEBUFFER = GL_FRAMEBUFFER;
const GL_RENDERBUFFER = 0x8d41;
exports.GL_RENDERBUFFER = GL_RENDERBUFFER;
const GL_RGBA4 = 0x8056;
exports.GL_RGBA4 = GL_RGBA4;
const GL_RGB5_A1 = 0x8057;
exports.GL_RGB5_A1 = GL_RGB5_A1;
const GL_RGB565 = 0x8d62;
exports.GL_RGB565 = GL_RGB565;
const GL_DEPTH_COMPONENT16 = 0x81a5;
exports.GL_DEPTH_COMPONENT16 = GL_DEPTH_COMPONENT16;
const GL_STENCIL_INDEX8 = 0x8d48;
exports.GL_STENCIL_INDEX8 = GL_STENCIL_INDEX8;
const GL_DEPTH_STENCIL = 0x84f9;
exports.GL_DEPTH_STENCIL = GL_DEPTH_STENCIL;
const GL_RENDERBUFFER_WIDTH = 0x8d42;
exports.GL_RENDERBUFFER_WIDTH = GL_RENDERBUFFER_WIDTH;
const GL_RENDERBUFFER_HEIGHT = 0x8d43;
exports.GL_RENDERBUFFER_HEIGHT = GL_RENDERBUFFER_HEIGHT;
const GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8d44;
exports.GL_RENDERBUFFER_INTERNAL_FORMAT = GL_RENDERBUFFER_INTERNAL_FORMAT;
const GL_RENDERBUFFER_RED_SIZE = 0x8d50;
exports.GL_RENDERBUFFER_RED_SIZE = GL_RENDERBUFFER_RED_SIZE;
const GL_RENDERBUFFER_GREEN_SIZE = 0x8d51;
exports.GL_RENDERBUFFER_GREEN_SIZE = GL_RENDERBUFFER_GREEN_SIZE;
const GL_RENDERBUFFER_BLUE_SIZE = 0x8d52;
exports.GL_RENDERBUFFER_BLUE_SIZE = GL_RENDERBUFFER_BLUE_SIZE;
const GL_RENDERBUFFER_ALPHA_SIZE = 0x8d53;
exports.GL_RENDERBUFFER_ALPHA_SIZE = GL_RENDERBUFFER_ALPHA_SIZE;
const GL_RENDERBUFFER_DEPTH_SIZE = 0x8d54;
exports.GL_RENDERBUFFER_DEPTH_SIZE = GL_RENDERBUFFER_DEPTH_SIZE;
const GL_RENDERBUFFER_STENCIL_SIZE = 0x8d55;
exports.GL_RENDERBUFFER_STENCIL_SIZE = GL_RENDERBUFFER_STENCIL_SIZE;
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8cd0;
exports.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8cd1;
exports.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8cd2;
exports.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8cd3;
exports.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
const GL_COLOR_ATTACHMENT0 = 0x8ce0;
exports.GL_COLOR_ATTACHMENT0 = GL_COLOR_ATTACHMENT0;
const GL_DEPTH_ATTACHMENT = 0x8d00;
exports.GL_DEPTH_ATTACHMENT = GL_DEPTH_ATTACHMENT;
const GL_STENCIL_ATTACHMENT = 0x8d20;
exports.GL_STENCIL_ATTACHMENT = GL_STENCIL_ATTACHMENT;
const GL_DEPTH_STENCIL_ATTACHMENT = 0x821a;
exports.GL_DEPTH_STENCIL_ATTACHMENT = GL_DEPTH_STENCIL_ATTACHMENT;
const GL_NONE = 0;
exports.GL_NONE = GL_NONE;
const GL_FRAMEBUFFER_COMPLETE = 0x8cd5;
exports.GL_FRAMEBUFFER_COMPLETE = GL_FRAMEBUFFER_COMPLETE;
const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8cd6;
exports.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8cd7;
exports.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8cd9;
exports.GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
const GL_FRAMEBUFFER_UNSUPPORTED = 0x8cdd;
exports.GL_FRAMEBUFFER_UNSUPPORTED = GL_FRAMEBUFFER_UNSUPPORTED;
const GL_FRAMEBUFFER_BINDING = 0x8ca6;
exports.GL_FRAMEBUFFER_BINDING = GL_FRAMEBUFFER_BINDING;
const GL_RENDERBUFFER_BINDING = 0x8ca7;
exports.GL_RENDERBUFFER_BINDING = GL_RENDERBUFFER_BINDING;
const GL_MAX_RENDERBUFFER_SIZE = 0x84e8;
exports.GL_MAX_RENDERBUFFER_SIZE = GL_MAX_RENDERBUFFER_SIZE;
const GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
exports.GL_INVALID_FRAMEBUFFER_OPERATION = GL_INVALID_FRAMEBUFFER_OPERATION;