// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../@graspologic/common

declare module '@graspologic/renderables-base' {
    export * from '@graspologic/renderables-base/DirtyRenderable';
    export * from '@graspologic/renderables-base/DataboundRenderable';
    export * from '@graspologic/renderables-base/CompositeDataboundRenderable';
}

declare module '@graspologic/renderables-base/DirtyRenderable' {
    import { Renderable, RenderOptions } from '@graspologic/common';
    /**
        * Base-class for property-holding renderable models
        */
    export class DirtyableRenderable implements Renderable {
            protected _needsRedraw: boolean;
            protected width: number;
            protected height: number;
            protected makeDirtyHandler: () => void;
            /**
                * Resizes the renderable
                * @param width The render width
                * @param height The render height
                */
            resize(width: number, height: number): void;
            /**
                * Gets whether or not the renderable needs to be redrawn
                */
            get needsRedraw(): boolean;
            /**
                * Gets whether or not the renderable is enabled
                */
            get enabled(): boolean;
            /**
                * Sets whether or not the renderable is enabled
                */
            set enabled(value: boolean);
            /**
                * Sets the flag indicating whether or not the renderable needs to be redrawn
                * @param value True if the renderable needs to be redrawn
                */
            protected setNeedsRedraw(value: boolean): void;
            /**
                * Draws the renderable
                * @param options The render options
                */
            draw(options: RenderOptions): void;
    }
}

declare module '@graspologic/renderables-base/DataboundRenderable' {
    import { DirtyableRenderable } from '@graspologic/renderables-base/DirtyRenderable';
    /**
        * Base class for a vertex renderable
        */
    export abstract class DataboundRenderable<T> extends DirtyableRenderable {
            protected data: T | undefined;
            /**
                * Determines whether this renderable is enabled
                */
            get enabled(): boolean;
            /**
                * Get the related vertex
                */
            getData(): T | undefined;
            /**
                * Set the related vertex
                * @param vertex The related vertex
                */
            setData(data: T | undefined): void;
            /**
                * Returns true if the new data is equal to the old data
                * @param data The new data
                * @param existing The edisting data
                */
            protected isEqual(data: T | undefined, existing: T | undefined): boolean;
            /**
                * Inner handler for responding to a new set vertex
                * @param vertex The vertext that has been set
                */
            protected abstract handleSetData(vertex: T | undefined): void;
    }
}

declare module '@graspologic/renderables-base/CompositeDataboundRenderable' {
    import { DataboundRenderable } from '@graspologic/renderables-base/DataboundRenderable';
    import { Renderable, RenderOptions } from '@graspologic/common';
    /**
        * Base class for a renderable that operates on Vertex data
        */
    export abstract class CompositeDataboundRenderable<T> extends DataboundRenderable<T> implements DataboundRenderable<T> {
            protected renderables: Renderable[];
            protected constructor(renderables: Renderable[]);
            /**
                * Draws out this renderable
                */
            draw(options: RenderOptions): void;
            /**
                * Determines if this renderable needs to be redrawn
                */
            get needsRedraw(): boolean;
    }
}

