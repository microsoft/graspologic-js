// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../@graspologic/renderer
//   ../react
//   ../@graspologic/graph

declare module '@graspologic/react' {
    export * from '@graspologic/react/GraphView';
    export * from '@graspologic/react/Axes';
    export * from '@graspologic/react/HighlightHoveredNode';
    export * from '@graspologic/react/LabelHoveredNode';
    export * from '@graspologic/react/HandleNodeClicks';
    export * from '@graspologic/react/Nodes';
    export * from '@graspologic/react/Edges';
    export * from '@graspologic/react/NodeSetHighlight';
    export * from '@graspologic/react/NodeSetLabel';
    export * from '@graspologic/react/Camera';
}

declare module '@graspologic/react/GraphView' {
    export * from '@graspologic/react/GraphView/context';
    export * from '@graspologic/react/GraphView/GraphView';
}

declare module '@graspologic/react/Axes' {
    export * from '@graspologic/react/Axes/Axes';
}

declare module '@graspologic/react/HighlightHoveredNode' {
    export * from '@graspologic/react/HighlightHoveredNode/HighlightHoveredNode';
}

declare module '@graspologic/react/LabelHoveredNode' {
    export * from '@graspologic/react/LabelHoveredNode/LabelHoveredNode';
}

declare module '@graspologic/react/HandleNodeClicks' {
    export * from '@graspologic/react/HandleNodeClicks/HandleNodeClicks';
    export * from '@graspologic/react/HandleNodeClicks/types';
}

declare module '@graspologic/react/Nodes' {
    export * from '@graspologic/react/Nodes/Nodes';
}

declare module '@graspologic/react/Edges' {
    export * from '@graspologic/react/Edges/Edges';
}

declare module '@graspologic/react/NodeSetHighlight' {
    export * from '@graspologic/react/NodeSetHighlight/NodeSetHighlight';
}

declare module '@graspologic/react/NodeSetLabel' {
    export * from '@graspologic/react/NodeSetLabel/NodeSetLabel';
}

declare module '@graspologic/react/Camera' {
    export * from '@graspologic/react/Camera/Camera';
}

declare module '@graspologic/react/GraphView/context' {
    import { GraphRenderer } from '@graspologic/renderer';
    export const GraphRendererContext: import("react").Context<GraphRenderer | undefined>;
}

declare module '@graspologic/react/GraphView/GraphView' {
    import * as React from 'react';
    import { InputGraph, GraphContainer, Node } from '@graspologic/graph';
    import { NodeColorizer, ColorVector, GraphRenderer, Maybe, Bounds } from '@graspologic/renderer';
    /**
        * Graph view properties
        */
    export interface GraphViewProps {
            /**
                * The CSS class name to inject into the containing div. The div will contain the canvas
                * where the graph will render into.
                */
            className?: string;
            /**
                * A CSS property object to be injected into the container div containing the graph rendering.
                */
            style?: React.CSSProperties;
            /**
                * The background color to use in the graph view
                */
            backgroundColor?: ColorVector;
            /**
                * A colorization function to use for vertex coloring. `vertex.group` is applied against the
                * colorization function to generate a categorical color.
                */
            colorizer?: NodeColorizer;
            /**
                * The graph dataset
                */
            data: InputGraph | GraphContainer;
            /**
                * The databounds for the graph
                */
            dataBounds?: Maybe<Bounds>;
            /**
                * If true, non-selected vertices will be hidden
                * @defaultValue [[DEFAULT_HIDE_DESELECTED]]
                */
            hideDeselected?: boolean;
            /**
                * A flag indicating whether to render in 3D mode.
                * @defaultValue [[DEFAULT_IS_3D]]
                */
            is3D?: boolean;
            /**
                * Interpolation time for animations (default=1000)
                * @defaultValue [[DEFAULT_INTERPOLATION_TIME]]
                */
            interpolationTime?: number;
            /**
                * A hint indicating the number of nodes that are expected
                * @defaultValue 10000
                */
            nodeCountHint?: number;
            /**
                * A hint indicating the number of edges that are expected
                * @defaultValue 10000
                */
            edgeCountHint?: number;
            /**
                * A boolean indicating whether or not to draw the edges
                * @defaultValue [[DEFAULT_DRAW_EDGES]]
                */
            drawEdges?: boolean;
            /**
                * A ref to the underlying GraphRenderer
                */
            ref?: React.Ref<GraphRenderer>;
            /**
                * Callback to be notified when the underlying renderer is ready.
                */
            onInitialize?: (renderer: GraphRenderer) => void;
            /**
                * Callback to be notified when the data has finished loading in the renderer.
                */
            onDataLoad?: () => void;
            /**
                * Callback to be notified when the graph renderer has been resized.
                */
            onResize?: () => void;
            /**
                * Callback that fires when a node is clicked
                */
            onNodeClick?: (node?: Node) => void;
            /**
                * Callback that fires when a node is hovered (and again when unhovered)
                */
            onNodeHover?: (node?: Node) => void;
    }
    /**
        * The GraphView component. This is the entry point for rendering graph data.
        */
    export const GraphView: React.FC<GraphViewProps>;
}

declare module '@graspologic/react/Axes/Axes' {
    import * as React from 'react';
    /**
        * The properties for the Axes component
        */
    export interface AxesProps {
            /**
                * A flag indicating whether to show the axes. default=true
                */
            shown?: boolean;
            /**
                * A flag indicating whether to draw the axes in the corner. default=true
                */
            inCorner?: boolean;
    }
    /**
        * Display's a set of Axes on the graph renderer
        */
    export const Axes: React.FC<AxesProps>;
}

declare module '@graspologic/react/HighlightHoveredNode/HighlightHoveredNode' {
    import * as React from 'react';
    import { ColorVector } from '@graspologic/renderer';
    /**
        * Properties for the HighlightHoveredNode component
        */
    export interface HighlightHoveredNodeProps {
            /**
                * The color of the highlight
                */
            color?: ColorVector;
            /**
                * Handler for when a node is hovered over
                */
            onHover?: (id: string | undefined) => void;
    }
    /**
        * Adds functionality to the GraphView component which highlights hovered nodes
        */
    export const HighlightHoveredNode: React.FC<HighlightHoveredNodeProps>;
}

declare module '@graspologic/react/LabelHoveredNode/LabelHoveredNode' {
    import * as React from 'react';
    /**
        * Properties for the LabelHoveredNode component
        */
    export interface LabelHoveredNodeProps {
            /**
                * Handler for when a node is hovered over
                */
            onHover?: (id: string | undefined) => void;
    }
    /**
        * Adds functionality to the GraphView component which adds labels to hovered nodes
        */
    export const LabelHoveredNode: React.FC<LabelHoveredNodeProps>;
}

declare module '@graspologic/react/HandleNodeClicks/HandleNodeClicks' {
    import * as React from 'react';
    import { VertexClickHandler } from '@graspologic/react/HandleNodeClicks/types';
    /**
        * Properties for the HandleNodeClicks Component
        */
    export interface HandleNodeClicksProps {
            /**
                * An handler function for when a vertex is clicked
                */
            onClick: VertexClickHandler;
    }
    /**
        * Adds node click functionality to the GraphView component
        */
    export const HandleNodeClicks: React.FC<HandleNodeClicksProps>;
}

declare module '@graspologic/react/HandleNodeClicks/types' {
    export type VertexClickHandler = (vertexId: string | undefined) => void;
}

declare module '@graspologic/react/Nodes/Nodes' {
    import * as React from 'react';
    /**
        * The set of properties for the Nodes component
        */
    export interface NodesProps {
            /**
                * The minimum radius of nodes, based on nodes _weight_ property
                * @defaultValue [[DEFAULT_NODE_MIN_RADIUS]]
                */
            minRadius?: number;
            /**
                * The minimum radius of nodes, based on nodes _weight_ property
                * @defaultValue [[DEFAULT_NODE_MAX_RADIUS]]
                */
            maxRadius?: number;
            /**
                * If true, nodes will be drawn with an outline
                * @defaultValue [[DEFAULT_NODE_OUTLINE]]
                */
            outline?: boolean;
            /**
                * If true, nodes will be hidden when the user is panning/zooming
                * @defaultValue [[DEFAULT_HIDE_NODES_ON_MOVE]]
                */
            hideOnMove?: boolean;
            /**
                * If true, nodes will be rendered
                * @defaultValue [[DEFAULT_DRAW_NODES]]
                */
            shown?: boolean;
            /**
                * The set of _filtered_ node ids
                */
            filteredIds?: string[];
            /**
                * The saturation of nodes which are _not in_ the filtered set
                * @defaultValue [[DEFAULT_NODE_FILTERED_OUT_SATURATION]]
                */
            filteredOutSaturation?: number;
            /**
                * The saturation of nodes which are _in_ the filtered set
                * @defaultValue [[DEFAULT_NODE_FILTERED_IN_SATURATION]]
                */
            filteredInSaturation?: number;
    }
    /**
        * Configures the node rendering for the GraphView component
        */
    export const Nodes: React.FC<NodesProps>;
}

declare module '@graspologic/react/Edges/Edges' {
    import * as React from 'react';
    /**
        * The set of properties for the Edges component
        */
    export interface EdgesProps {
            /**
                * If true, edges will be shown
                * @defaultValue true
                */
            shown?: boolean;
            /**
                * If true, the edges will be hidden when the user is panning or zooming
                */
            hideOnMove?: boolean;
            /**
                * If true, edges will remain a constant size regardless of the zoom level
                * @defaultValue [[DEFAULT_EDGE_CONSTANT_WIDTH]]
                */
            constantWidth?: boolean;
            /**
                * If true, edges which are closer to the camera will occlude further away ones
                * @defaultValue [[DEFAULT_EDGE_DEPTH_WRITE]]
                */
            depthWrite?: boolean;
            /**
                * If true, the edges will be anti-aliased
                * @defaultValue [[DEFAULT_EDGE_ANTIALIAS]]
                */
            antialias?: boolean;
            /**
                * The minimum width of the edges
                * @defaultValue [[DEFAULT_EDGE_MIN_WIDTH]]
                */
            minWidth?: number;
            /**
                * The maximum width of the edges
                * @defaultValue [[DEFAULT_EDGE_MAX_WIDTH]]
                */
            maxWidth?: number;
            /**
                * The transparency of the edges
                * @defaultValue [[DEFAULT_EDGE_ALPHA]]
                */
            alpha?: number;
            /**
                * The saturation of edges which are _not in_ the filtered set
                * @defaultValue [[DEFAULT_EDGE_FILTERED_OUT_SATURATION]]
                */
            filteredOutSaturation?: number;
            /**
                * The saturation of edges which are _in_ the filtered set
                * @defaultValue [[DEFAULT_EDGE_FILTERED_IN_SATURATION]]
                */
            filteredInSaturation?: number;
    }
    /**
        * Configures the edge rendering for a GraphView
        */
    export const Edges: React.FC<EdgesProps>;
}

declare module '@graspologic/react/NodeSetHighlight/NodeSetHighlight' {
    import * as React from 'react';
    import { ColorVector } from '@graspologic/renderer';
    /**
        * Properties for the NodeSetHighlight component
        */
    export interface NodeSetHighlightProps {
            /**
                * The set of verticies to highlight
                */
            vertexIds: string[];
            /**
                * The color to highlight them
                */
            color?: ColorVector;
    }
    /**
        * Adds functionality to the GraphView component which colors a set of verticies a given color
        */
    export const NodeSetHighlight: React.FC<NodeSetHighlightProps>;
}

declare module '@graspologic/react/NodeSetLabel/NodeSetLabel' {
    import * as React from 'react';
    /**
        * Properties for the NodeSetHighlight component
        */
    export interface NodeSetLabelProps {
            /**
                * The set of verticies to label
                */
            vertexIds: string[];
    }
    /**
        * Adds functionality to the GraphView component which adds labels for a set of verticies
        */
    export const NodeSetLabel: React.FC<NodeSetLabelProps>;
}

declare module '@graspologic/react/Camera/Camera' {
    import * as React from 'react';
    import { Bounds, CameraAdjustmentMode } from '@graspologic/renderer';
    /**
        * The properties for the Camera component
        */
    export interface CameraProps {
            /**
                * Optional: The declarative z value of the camera. Zoomed out = -1000, Zoomed in = 0
                * @defaultValue 0
                */
            zoom?: number;
            /**
                * Can user's adjust the camera manually
                * @defaultValue true
                */
            interactive?: boolean;
            /**
                * The bounds to view with the camera
                */
            bounds?: Bounds;
            /**
                * The length of time to take to transition to the new bounds (if the bounds property is provided)
                */
            transitionDuration?: number;
            /**
                * The adjustment mode for the camera, controls how the camera will automatically move
                * @defaultValue [[CameraAdjustmentMode.Default]]
                */
            mode?: CameraAdjustmentMode;
            /**
                * If true, double clicking on the graph will zoom the camera
                *
                * @defaultValue true
                */
            doubleClickZoom?: boolean;
    }
    /**
        * Adds an adjustable camera to the current GraphRenderer
        */
    export const Camera: React.FC<CameraProps>;
}

