// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../math.gl
//   ../@graspologic/common

declare module '@graspologic/camera' {
    export * from '@graspologic/camera/Camera';
}

declare module '@graspologic/camera/Camera' {
    import { Matrix4, Quaternion, Vector3 } from 'math.gl';
    import { Bounds, EventEmitter } from '@graspologic/common';
    /**
        * The events for the camera
        */
    export interface CameraEvents {
            /**
                * Event that is fired when moving is complete
                */
            movingComplete(): void;
    }
    /**
        * Maintains Camera State for Graph Renderer
        */
    export class Camera extends EventEmitter<CameraEvents> {
            /**
                * Constructor for the Camera
                */
            constructor();
            /**
                * Resizes the camera
                * @param width The width of the display
                * @param height The height of the display
                */
            resize(width: number, height: number): void;
            /**
                * Updates the camera such that the given bounds is what will be displayed on screen
                * @param bounds The bounds of the view
                * @param duration How long the transition should take
                */
            fitToView(bounds: Bounds, duration?: number): void;
            /**
                * Moves the camera to the given coordinates
                * @param x The x coordinate of the camera
                * @param y The y coordinate of the camera
                * @param z The z coordinate of the camera
                */
            moveTo(x: number, y: number, z: number, duration?: number): void;
            /**
                * Gets the current projection matrix
                */
            get projection(): Matrix4;
            /**
                * Gets the field of view of the camera
                */
            fov(): number;
            /**
                * Gets the view matrix representing the current position and rotation of the camera
                * @param rotation True if the rotation component should be included
                */
            computeViewMatrix(rotation?: boolean): Matrix4;
            /**
                * Gets the current position of the camera
                */
            get position(): Vector3;
            /**
                * Sets the current position of the camera
                */
            set position(value: Vector3);
            /**
                * Gets the current rotation (3d or 2d) based on the is3D configuration
                */
            get rotation(): Quaternion;
            /**
                * Sets the current rotation (3d or 2d) based on the is3D configuration
                */
            set rotation(value: Quaternion);
            /**
                * Function indicating that a user is currently moving the camera
                */
            beginUser(): void;
            /**
                * Function indicating that a user is done moving the camera
                */
            endUser(): void;
            /**
                * Returns true if the camera is currently moving (either via transitions or user activity)
                */
            get isMoving(): boolean;
            /**
                * Ticks the camera, so it can transition from state to state smoothly
                * @param time The current time
                */
            tick(time: number): void;
    }
}

